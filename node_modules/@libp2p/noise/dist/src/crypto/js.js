import { hkdf } from '@noble/hashes/hkdf';
import { sha256 } from '@noble/hashes/sha256';
import { ChaCha20Poly1305 } from '@stablelib/chacha20poly1305';
import * as x25519 from '@stablelib/x25519';
export const pureJsCrypto = {
    hashSHA256(data) {
        return sha256(data);
    },
    getHKDF(ck, ikm) {
        const okm = hkdf(sha256, ikm, ck, undefined, 96);
        const k1 = okm.subarray(0, 32);
        const k2 = okm.subarray(32, 64);
        const k3 = okm.subarray(64, 96);
        return [k1, k2, k3];
    },
    generateX25519KeyPair() {
        const keypair = x25519.generateKeyPair();
        return {
            publicKey: keypair.publicKey,
            privateKey: keypair.secretKey
        };
    },
    generateX25519KeyPairFromSeed(seed) {
        const keypair = x25519.generateKeyPairFromSeed(seed);
        return {
            publicKey: keypair.publicKey,
            privateKey: keypair.secretKey
        };
    },
    generateX25519SharedKey(privateKey, publicKey) {
        return x25519.sharedKey(privateKey, publicKey);
    },
    chaCha20Poly1305Encrypt(plaintext, nonce, ad, k) {
        const ctx = new ChaCha20Poly1305(k);
        return ctx.seal(nonce, plaintext, ad);
    },
    chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst) {
        const ctx = new ChaCha20Poly1305(k);
        return ctx.open(nonce, ciphertext, ad, dst);
    }
};
//# sourceMappingURL=js.js.map